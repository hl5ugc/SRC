/* --------------------------------------------------------------------------
 * [ PROJECT   ]   
 * [ License   ]  SAMJIN ELECTRONICS.,Co.Ltd
 * [ Author    ]  Copyright 2023 By HAG-SEONG KANG
 * [ E-MAIL    ]  hl5ugc@nate.com (82)10- 3841-9706
 * [ C  P  U   ]
 * [ Compller  ]  
 * [ Filename  ]  MEMORY.c
 * [ Version   ]  1.0
 * [ Created   ]   
 * --------------------------------------------------------------------------
 * Revision History :
 * ------------------------------------------------------------------
 *
 *
 *  *.The use of this source code shall be deemed to have been 
 *    tacitly agreed by the user.
 *  *.This source code is freely available for personal learning 
 *    and research and development.
 *  *.In the case of secondary authoring or redistribution using this source, 
 *    it is essential The company name of SAMJIN ELECTRONICS must be specified.
 *  *.Do not sell or for-profit this source code.
 *	*.This clause and the original author mark are prohibited from being 
 *	  modified or deleted. 
 *  
 *------------------------------------------------------------------
 * --------------------------------------------------------------------------
 * Author         Date       Comments on this revision
 * --------------------------------------------------------------------------
 * Hagseong Kang  Jul 14, 2023    First release of this file
 * --------------------------------------------------------------------------
 * Additional Notes:
 * **************************************************************************
 */
 /**
 * @brief 
 * @param  
 * @return  
 */


/* Define Includes */
#include "MEMORY.h"
#include "At24c256.h"

#include "cli.h" 
#include "uart.h" 
// ---------------------------------------------------------------------------
//  Define Macros .
// ---------------------------------------------------------------------------
//

// ---------------------------------------------------------------------------
//  Define Constants.
// ---------------------------------------------------------------------------
//
 
// ---------------------------------------------------------------------------
//  Define Private variables.
// ---------------------------------------------------------------------------
//
 
// ---------------------------------------------------------------------------
// Define private function definitions.  
// ---------------------------------------------------------------------------
//
static void cliEEPROM_Check(cli_args_t *args);
static void cliEEPROM_Dump(cli_args_t *args);
// ---------------------------------------------------------------------------
// Define Public function definitions. 
// ---------------------------------------------------------------------------
//
void MemoryInit(void)
{
  cliAdd("EEprom", "R/W Add Data", cliEEPROM_Check); // Data Convertion Test
  cliAdd("EEDump","Add Count",cliEEPROM_Dump);  // Data Convertion Test
}
// ---------------------------------------------------------------------------
// Define Private function prototype.
// ---------------------------------------------------------------------------
//

// ---------------------------------------------------------------------------
//  Define Callbacks definitions.
// ---------------------------------------------------------------------------
//
 
/**
 * @brief  
 * 
 * @param args hl5ugc>> EEprom R/W Address Data
 */
void cliEEPROM_Check(cli_args_t *args)
{
  uint8_t  *u8Command  = NULL ;
  uint16_t u16Address = 0x00U ;
  uint16_t u16data    = 0x00U ;

  if(args->argc >= 1)
  {
    u8Command = args->getStr(0);
    if(args->argc >= 2)
    {
      u16Address = args->getData(1) ; // ASCII DECMAL & HEX Convert to binary
    }
    if(args->argc >= 3)
    {
      u16data = args->getData(2) ; // ASCII DECMAL & HEX Convert to binary
    }
    if(u16Address >= 64U)
    {
    //
      if((u8Command[0] == 'r') || (u8Command[0] == 'R'))
      {
        u16data = At24c_Read_2Bytes(u16Address);
        uartMsgWord5DASC(_DEF_UART1,"\n\r",u16Address);
        uartMsgWord5DASC(_DEF_UART1," => ",u16data);
      }
      if((u8Command[0] == 'w') || (u8Command[0] == 'W'))
      {
        At24c_Write_2Bytes(u16Address,u16data);
        u16data = At24c_Read_2Bytes(u16Address);
        uartMsgWord5DASC(_DEF_UART1,"\n\r",u16Address);
        uartMsgWord5DASC(_DEF_UART1," => ",u16data);
      }
    }
    else
    {
      uartMsgWrite(_DEF_UART1,"Address Err! Addrees < 64");
    }
  }
  else
  {
    uartMsgWrite(_DEF_UART1,"hl5ugc>> EEprom R/W Address Data");
  }
}
//
void cliEEPROM_Dump(cli_args_t *args)
{
  uint8_t  u8i = 0x00 ;
  uint16_t u16Address = 0x00U ;
  uint8_t  u8Count    = 0x00U ;
  uint16_t u16data    = 0x00U ;

  if(args->argc >= 2)
  {
    u16Address = args->getData(0) ; // ASCII DECMAL & HEX Convert to binary
    if(u16Address >= 64U)
    {
      u8Count =(uint8_t)args->getData(1) ; 
      if(u8Count <= 32U)
      {
        for(u8i=0x00; u8i<u8Count ; u8i++) 
        {
          u16data = At24c_Read_2Bytes(u16Address);
          uartMsgWord5DASC(_DEF_UART1,"\n\r",u16Address);
          uartMsgWord5DASC(_DEF_UART1," : ",u16data);
          u16Address = (u16Address + 2U) ;
        } 
      }
      else
      {
        uartMsgWrite(_DEF_UART1,"Count Err! Count > 32");
      }
    }
    else
    {
      uartMsgWrite(_DEF_UART1,"Address Err! Addrees < 64");
    }
  }
  else
  {
    uartMsgWrite(_DEF_UART1,"hl5ugc>> ee_dump Address Count");
  }
}
 

/* MEMORY.c End Of File !! Well Done */
